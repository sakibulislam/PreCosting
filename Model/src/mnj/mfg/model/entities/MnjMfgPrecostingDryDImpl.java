package mnj.mfg.model.entities;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 25 13:27:41 BDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MnjMfgPrecostingDryDImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    @Override
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        oracle.jbo.server.SequenceImpl s =new oracle.jbo.server.SequenceImpl("MNJ_MFG_PRECOSTING_DRY_D_S",getDBTransaction());
        oracle.jbo.domain.Number sVal = s.getSequenceNumber();
        setDetailId(sVal);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DetailId {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getDetailId();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setDetailId((Number)value);
            }
        }
        ,
        LineId {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getLineId();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setLineId((Number)value);
            }
        }
        ,
        ProcessId {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getProcessId();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setProcessId((Number)value);
            }
        }
        ,
        ProcessName {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getProcessName();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setProcessName((String)value);
            }
        }
        ,
        CostAmount {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getCostAmount();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setCostAmount((Number)value);
            }
        }
        ,
        Profit {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getProfit();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setProfit((Number)value);
            }
        }
        ,
        ManualPrice {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getManualPrice();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setManualPrice((Number)value);
            }
        }
        ,
        Total {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getTotal();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setTotal((Number)value);
            }
        }
        ,
        CostUom {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getCostUom();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setCostUom((String)value);
            }
        }
        ,
        MnjMfgPrecostingL {
            public Object get(MnjMfgPrecostingDryDImpl obj) {
                return obj.getMnjMfgPrecostingL();
            }

            public void put(MnjMfgPrecostingDryDImpl obj, Object value) {
                obj.setMnjMfgPrecostingL((MnjMfgPrecostingLImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MnjMfgPrecostingDryDImpl object);

        public abstract void put(MnjMfgPrecostingDryDImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DETAILID = AttributesEnum.DetailId.index();
    public static final int LINEID = AttributesEnum.LineId.index();
    public static final int PROCESSID = AttributesEnum.ProcessId.index();
    public static final int PROCESSNAME = AttributesEnum.ProcessName.index();
    public static final int COSTAMOUNT = AttributesEnum.CostAmount.index();
    public static final int PROFIT = AttributesEnum.Profit.index();
    public static final int MANUALPRICE = AttributesEnum.ManualPrice.index();
    public static final int TOTAL = AttributesEnum.Total.index();
    public static final int COSTUOM = AttributesEnum.CostUom.index();
    public static final int MNJMFGPRECOSTINGL = AttributesEnum.MnjMfgPrecostingL.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MnjMfgPrecostingDryDImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("mnj.mfg.model.entities.MnjMfgPrecostingDryD");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for DetailId, using the alias name DetailId.
     * @return the DetailId
     */
    public Number getDetailId() {
        return (Number)getAttributeInternal(DETAILID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DetailId.
     * @param value value to set the DetailId
     */
    public void setDetailId(Number value) {
        setAttributeInternal(DETAILID, value);
    }

    /**
     * Gets the attribute value for LineId, using the alias name LineId.
     * @return the LineId
     */
    public Number getLineId() {
        return (Number)getAttributeInternal(LINEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LineId.
     * @param value value to set the LineId
     */
    public void setLineId(Number value) {
        setAttributeInternal(LINEID, value);
    }

    /**
     * Gets the attribute value for ProcessId, using the alias name ProcessId.
     * @return the ProcessId
     */
    public Number getProcessId() {
        return (Number)getAttributeInternal(PROCESSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProcessId.
     * @param value value to set the ProcessId
     */
    public void setProcessId(Number value) {
        setAttributeInternal(PROCESSID, value);
    }

    /**
     * Gets the attribute value for ProcessName, using the alias name ProcessName.
     * @return the ProcessName
     */
    public String getProcessName() {
        return (String)getAttributeInternal(PROCESSNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProcessName.
     * @param value value to set the ProcessName
     */
    public void setProcessName(String value) {
        setAttributeInternal(PROCESSNAME, value.trim());
    }

    /**
     * Gets the attribute value for CostAmount, using the alias name CostAmount.
     * @return the CostAmount
     */
    public Number getCostAmount() {
        return (Number)getAttributeInternal(COSTAMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CostAmount.
     * @param value value to set the CostAmount
     */
    public void setCostAmount(Number value) {
        setAttributeInternal(COSTAMOUNT, value);
    }

    /**
     * Gets the attribute value for Profit, using the alias name Profit.
     * @return the Profit
     */
    public Number getProfit() {
        return (Number)getAttributeInternal(PROFIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Profit.
     * @param value value to set the Profit
     */
    public void setProfit(Number value) {
        setAttributeInternal(PROFIT, value);
    }

    /**
     * Gets the attribute value for ManualPrice, using the alias name ManualPrice.
     * @return the ManualPrice
     */
    public Number getManualPrice() {
        return (Number)getAttributeInternal(MANUALPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ManualPrice.
     * @param value value to set the ManualPrice
     */
    public void setManualPrice(Number value) {
        setAttributeInternal(MANUALPRICE, value);
    }

    /**
     * Gets the attribute value for Total, using the alias name Total.
     * @return the Total
     */
    public Number getTotal() {
        return (Number)getAttributeInternal(TOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Total.
     * @param value value to set the Total
     */
    public void setTotal(Number value) {
        setAttributeInternal(TOTAL, value);
    }

    /**
     * Gets the attribute value for CostUom, using the alias name CostUom.
     * @return the CostUom
     */
    public String getCostUom() {
        return (String)getAttributeInternal(COSTUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for CostUom.
     * @param value value to set the CostUom
     */
    public void setCostUom(String value) {
        setAttributeInternal(COSTUOM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MnjMfgPrecostingLImpl.
     */
    public MnjMfgPrecostingLImpl getMnjMfgPrecostingL() {
        return (MnjMfgPrecostingLImpl)getAttributeInternal(MNJMFGPRECOSTINGL);
    }

    /**
     * Sets <code>value</code> as the associated entity MnjMfgPrecostingLImpl.
     */
    public void setMnjMfgPrecostingL(MnjMfgPrecostingLImpl value) {
        setAttributeInternal(MNJMFGPRECOSTINGL, value);
    }

    /**
     * @param detailId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number detailId) {
        return new Key(new Object[]{detailId});
    }


}
